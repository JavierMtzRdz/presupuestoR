envir = as.environment("package:presupuestoR"))
}
if (!all(c(year_monto, year_out) %in% deflactor$year)) {
warning("A\\u00f1o no incluido supera el rango de a\\u00f1os disponible. La cifra no fue deflactada.")
return(monto)
}
deflactor_out <- try(purrr::map_dbl(year_out,
function(x)
deflactor[deflactor$year %in% as.numeric(x),]$deflactor_year),
silent = T)
if (class(deflactor_out) == "try-error") {
warning("Error en el a\\u00f1o del monto deflactado. La cifra no fue deflactada.")
return(monto)
}
deflactor_monto <- try(purrr::map_dbl(year_monto,
function(x)
deflactor[deflactor$year %in% as.numeric(x),]$deflactor_year),
silent = T)
if (class(deflactor_monto) == "try-error") {
warning("Error en el a\\u00f1o al que se va a deflactar. La cifra no fue deflactada.")
return(monto)
}
monto_deflactado <- (monto * deflactor_out) / deflactor_monto
return(monto_deflactado)
}
deflactar_tp(20219, 2019, 2026, fuente = "cargar")
deflactar_tp(20219, 2019, 2026, fuente = "cargar")
!exists("deflactor")
exists("deflactor")
!exists("deflactor") ||
!(c("year") %in% colnames(deflactor))
!exists("deflactor") ||
!(c("year") %in% colnames(deflactor))
exists("deflactor") ||
!(c("year") %in% colnames(deflactor)) ||
!(c("deflactor_year") %in% colnames(deflactor))
exists("deflactor") ||
!(c("year") %in% colnames(deflactor)) ||
!(c("deflactor_year") %in% colnames(deflactor))
exists("deflactor") ||
!(c("year") %in% colnames(deflactor)) ||
!(c("deflactor_year") %in% colnames(deflactor))
(!exists("deflactor") ||
!(c("year") %in% colnames(deflactor)) ||
!(c("deflactor_year") %in% colnames(deflactor)))
!exists("deflactor")
(
# !exists("deflactor") ||
!(c("year") %in% colnames(deflactor)) ||
!(c("deflactor_year") %in% colnames(deflactor)))
(
# !exists("deflactor") ||
!(c("year") %in% colnames(deflactor)) ||
!(c("deflactor_year") %in% colnames(deflactor)))
#'
#' @param monto monto que se quiere deflactar
#' @param year_monto año de origen del monto (para que funciones tiene que ser
#' entre 1994 y 2030)
#' @param year_out año del precio al que se quiere deflactar (para que funciones tiene que ser
#' entre 1994 y 2030)
#'
#' @importFrom magrittr %>%
#' @return regresa un vector de los montos deflactados
#' @export
deflactar_tp <- function(monto, year_monto, year_out,
fuente = "local") {
year_monto <- as.numeric(year_monto)
year_out <- as.numeric(year_out)
monto <- as.numeric(monto)
if (fuente == "cargar" &
(
# !exists("deflactor") ||
!(c("year") %in% colnames(deflactor)) ||
!(c("deflactor_year") %in% colnames(deflactor)))) {
assign("deflactor_desc",
openxlsx::read.xlsx("https://www.transparenciapresupuestaria.gob.mx/work/models/PTP/Presupuesto/Programacion/Deflactores/Deflactores_PIB.xlsx",
rows = 4:40) %>%
janitor::clean_names() %>%
dplyr::rename(deflactor_year = starts_with("deflactor_del_pib")) %>%
dplyr::transmute(year = as.numeric(periodo),
deflactor_year) %>%
dplyr::filter(!is.na(year)),
envir = as.environment("package:presupuestoR"))
deflactor <- deflactor_desc
}
if (!all(c(year_monto, year_out) %in% deflactor$year)) {
warning("A\\u00f1o no incluido supera el rango de a\\u00f1os disponible. La cifra no fue deflactada.")
return(monto)
}
deflactor_out <- try(purrr::map_dbl(year_out,
function(x)
deflactor[deflactor$year %in% as.numeric(x),]$deflactor_year),
silent = T)
if (class(deflactor_out) == "try-error") {
warning("Error en el a\\u00f1o del monto deflactado. La cifra no fue deflactada.")
return(monto)
}
deflactor_monto <- try(purrr::map_dbl(year_monto,
function(x)
deflactor[deflactor$year %in% as.numeric(x),]$deflactor_year),
silent = T)
if (class(deflactor_monto) == "try-error") {
warning("Error en el a\\u00f1o al que se va a deflactar. La cifra no fue deflactada.")
return(monto)
}
monto_deflactado <- (monto * deflactor_out) / deflactor_monto
return(monto_deflactado)
}
(!exists("deflactor_desc") ||
!(c("year") %in% colnames(deflactor)) ||
!(c("deflactor_year") %in% colnames(deflactor)))
(!exists("deflactor_desc") ||
!(c("year") %in% colnames(deflactor)) ||
!(c("deflactor_year") %in% colnames(deflactor)))
deflactar_tp(20219, 2019, 2026, fuente = "cargar")
#'
#' @param monto monto que se quiere deflactar
#' @param year_monto año de origen del monto (para que funciones tiene que ser
#' entre 1994 y 2030)
#' @param year_out año del precio al que se quiere deflactar (para que funciones tiene que ser
#' entre 1994 y 2030)
#'
#' @importFrom magrittr %>%
#' @return regresa un vector de los montos deflactados
#' @export
deflactar_tp <- function(monto, year_monto, year_out,
fuente = "local") {
year_monto <- as.numeric(year_monto)
year_out <- as.numeric(year_out)
monto <- as.numeric(monto)
if (fuente == "cargar" &
(!exists("deflactor_desc") ||
!(c("year") %in% colnames(deflactor)) ||
!(c("deflactor_year") %in% colnames(deflactor)))) {
assign("deflactor_desc",
openxlsx::read.xlsx("https://www.transparenciapresupuestaria.gob.mx/work/models/PTP/Presupuesto/Programacion/Deflactores/Deflactores_PIB.xlsx",
rows = 4:40) %>%
janitor::clean_names() %>%
dplyr::rename(deflactor_year = starts_with("deflactor_del_pib")) %>%
dplyr::transmute(year = as.numeric(periodo),
deflactor_year) %>%
dplyr::filter(!is.na(year)),
envir = as.environment("package:presupuestoR"))
deflactor <- deflactor_desc
}
if (!all(c(year_monto, year_out) %in% deflactor$year)) {
warning("A\\u00f1o no incluido supera el rango de a\\u00f1os disponible. La cifra no fue deflactada.")
return(monto)
}
deflactor_out <- try(purrr::map_dbl(year_out,
function(x)
deflactor[deflactor$year %in% as.numeric(x),]$deflactor_year),
silent = T)
if (class(deflactor_out) == "try-error") {
warning("Error en el a\\u00f1o del monto deflactado. La cifra no fue deflactada.")
return(monto)
}
deflactor_monto <- try(purrr::map_dbl(year_monto,
function(x)
deflactor[deflactor$year %in% as.numeric(x),]$deflactor_year),
silent = T)
if (class(deflactor_monto) == "try-error") {
warning("Error en el a\\u00f1o al que se va a deflactar. La cifra no fue deflactada.")
return(monto)
}
monto_deflactado <- (monto * deflactor_out) / deflactor_monto
return(monto_deflactado)
}
deflactar_tp(20219, 2019, 2026, fuente = "cargar")
(!exists("deflactor_desc") ||
!(c("year") %in% colnames(deflactor)) ||
!(c("deflactor_year") %in% colnames(deflactor)))
(!exists("deflactor_desc") ||
!(c("year") %in% colnames(deflactor)) ||
!(c("deflactor_year") %in% colnames(deflactor)))
(!exists("deflactor_desc") ||
!(c("year") %in% colnames(deflactor)) ||
!(c("deflactor_year") %in% colnames(deflactor)))
(!exists("deflactor_desc") ||
!(c("year") %in% colnames(deflactor)) ||
!(c("deflactor_year") %in% colnames(deflactor)))
exists("deflactor_desc")
exists("deflactor_desc")
pacman::p_load(devtools, usethis)
#'
#' @param monto monto que se quiere deflactar
#' @param year_monto año de origen del monto (para que funciones tiene que ser
#' entre 1994 y 2030)
#' @param year_out año del precio al que se quiere deflactar (para que funciones tiene que ser
#' entre 1994 y 2030)
#'
#' @importFrom magrittr %>%
#' @return regresa un vector de los montos deflactados
#' @export
deflactar_tp <- function(monto, year_monto, year_out,
fuente = "local") {
year_monto <- as.numeric(year_monto)
year_out <- as.numeric(year_out)
monto <- as.numeric(monto)
if (fuente == "cargar" &
(!exists("deflactor_desc") ||
!(c("year") %in% colnames(deflactor)) ||
!(c("deflactor_year") %in% colnames(deflactor)))) {
assign("deflactor_desc",
openxlsx::read.xlsx("https://www.transparenciapresupuestaria.gob.mx/work/models/PTP/Presupuesto/Programacion/Deflactores/Deflactores_PIB.xlsx",
rows = 4:40) %>%
janitor::clean_names() %>%
dplyr::rename(deflactor_year = starts_with("deflactor_del_pib")) %>%
dplyr::transmute(year = as.numeric(periodo),
deflactor_year) %>%
dplyr::filter(!is.na(year)),
envir = as.environment("package:presupuestoR"))
deflactor <- deflactor_desc
}
if (!all(c(year_monto, year_out) %in% deflactor$year)) {
warning("A\\u00f1o no incluido supera el rango de a\\u00f1os disponible. La cifra no fue deflactada.")
return(monto)
}
deflactor_out <- try(purrr::map_dbl(year_out,
function(x)
deflactor[deflactor$year %in% as.numeric(x),]$deflactor_year),
silent = T)
if (class(deflactor_out) == "try-error") {
warning("Error en el a\\u00f1o del monto deflactado. La cifra no fue deflactada.")
return(monto)
}
deflactor_monto <- try(purrr::map_dbl(year_monto,
function(x)
deflactor[deflactor$year %in% as.numeric(x),]$deflactor_year),
silent = T)
if (class(deflactor_monto) == "try-error") {
warning("Error en el a\\u00f1o al que se va a deflactar. La cifra no fue deflactada.")
return(monto)
}
monto_deflactado <- (monto * deflactor_out) / deflactor_monto
return(monto_deflactado)
}
deflactar_tp(23423, 2001, 2021)
load_all()
deflactar_tp(23423, 2001, 2021)
deflactar_tp(23423, 2001, 2021, fuente = "cargar")
View(deflactor_desc)
pacman::p_load(devtools, usethis)
load_all()
deflactar_tp(25, 2000, 2021)
deflactar_tp(25, 2000, 2021, fuente = "cargar")
check()
assign("deflactor",
openxlsx::read.xlsx("https://www.transparenciapresupuestaria.gob.mx/work/models/PTP/Presupuesto/Programacion/Deflactores/Deflactores_PIB.xlsx",
rows = 4:40) %>%
janitor::clean_names() %>%
dplyr::rename(deflactor_year = starts_with("deflactor_del_pib")) %>%
dplyr::transmute(year = as.numeric(periodo),
deflactor_year) %>%
dplyr::filter(!is.na(year)),
envir = as.environment("package:presupuestoR"))
assign("deflactor_local",
openxlsx::read.xlsx("https://www.transparenciapresupuestaria.gob.mx/work/models/PTP/Presupuesto/Programacion/Deflactores/Deflactores_PIB.xlsx",
rows = 4:40) %>%
janitor::clean_names() %>%
dplyr::rename(deflactor_year = starts_with("deflactor_del_pib")) %>%
dplyr::transmute(year = as.numeric(periodo),
deflactor_year) %>%
dplyr::filter(!is.na(year)),
envir = as.environment("package:presupuestoR"))
deflactor <- deflactor_local
assign("deflactor_local",
openxlsx::read.xlsx("https://www.transparenciapresupuestaria.gob.mx/work/models/PTP/Presupuesto/Programacion/Deflactores/Deflactores_PIB.xlsx",
rows = 4:40) %>%
janitor::clean_names() %>%
dplyr::rename(deflactor_year = starts_with("deflactor_del_pib")) %>%
dplyr::transmute(year = as.numeric(periodo),
deflactor_year) %>%
dplyr::filter(!is.na(year)),
envir = as.environment("package:presupuestoR"))
save(deflactor_local, file = "data/deflactor_local.rda")
load_all()
deflactar_tp(21431, 2020, 2021)
deflactar_tp(21431, 2020, 2021, fuente = "cargar")
check()
force(deflactor_local)
document()
check()
??banxico_series
?str_starts
document()
check()
check()
document()
check()
use_import_from("rlang", :=, load = is_interactive())
use_import_from("rlang", :=, load = is_interactive())
tibble::tibble(" tes sdfs fs" = "hola")
use_import_from("rlang", `:=`, load = is_interactive())
rlang::`:=`
use_import_from("rlang", `:=`)
use_import_from("rlang", fun(`:=`))
rlang::`:=`
rlang::`:=`
document()
check()
?download.file
utils::download.file(inpc_ur, destfile = temp, mode = 'wb')
temp <- tempfile(fileext = ".xls")
inpc_ur <- "http://www.banxico.org.mx/SieInternet/consultasieiqy?series=SP1&locale=en"
utils::download.file(inpc_ur, destfile = temp, mode = 'wb')
check()
dplyr::starts_with("deflactor_del_pib")
?starts_with
check()
document()
check()
document()
check()
document()
check()
install()
install()
pacman::p_load(devtools)
document()
stringi::stri_escape_unicode("áéíóúñ")
pacman::p_load(devtools)
load_all()
document()
document()
check()
check()
check()
check()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
document()
check()
stringi::stri_escape_unicode("ü")
document()
check()
install()
pacman::p_load(devtools)
document()
check()
install()
pacman::p_load(devtools)
document()
load_all()
install()
if (!exists("inpc_bd") ||
!(c("fecha") %in% colnames(inpc_bd)) ||
!(c("mes") %in% colnames(inpc_bd)) ||
!(c("year") %in% colnames(inpc_bd)) ||
!(c("inpc") %in% colnames(inpc_bd))) {
temp <- tempfile(fileext = ".xls")
inpc_ur <- "http://www.banxico.org.mx/SieInternet/consultasieiqy?series=SP1&locale=en"
utils::download.file(inpc_ur, destfile = temp, mode = 'wb')
assign("inpc_bd",
XML::htmlParse(temp) %>%
XML::getNodeSet('//table') %>%
.[[6]] %>%
XML::readHTMLTable() %>%
dplyr::tibble() %>%
janitor::clean_names() %>%
tidyr::separate(date, c("mes", "year")) %>%
dplyr::transmute(fecha = paste0(mes, "/", year),
mes = as.numeric(mes),
year = as.numeric(year),
inpc = as.numeric(sp1)),
envir = as.environment("package:presupuestoR"))
}
env_binding_unlock(as.environment("package:presupuestoR"))
assign("inpc_bd",
XML::htmlParse(temp) %>%
XML::getNodeSet('//table') %>%
.[[6]] %>%
XML::readHTMLTable() %>%
dplyr::tibble() %>%
janitor::clean_names() %>%
tidyr::separate(date, c("mes", "year")) %>%
dplyr::transmute(fecha = paste0(mes, "/", year),
mes = as.numeric(mes),
year = as.numeric(year),
inpc = as.numeric(sp1)),
envir = as.environment("package:presupuestoR"))
pacman::p_load(tidyverse)
temp <- tempfile(fileext = ".xls")
inpc_ur <- "http://www.banxico.org.mx/SieInternet/consultasieiqy?series=SP1&locale=en"
utils::download.file(inpc_ur, destfile = temp, mode = 'wb')
env_binding_unlock(as.environment("package:presupuestoR"))
pacman::p_load(rlang)
env_binding_unlock(as.environment("package:presupuestoR"))
pacman::p_load(presupuestoR)
env_binding_unlock(as.environment("package:presupuestoR"))
assign("inpc_bd",
XML::htmlParse(temp) %>%
XML::getNodeSet('//table') %>%
.[[6]] %>%
XML::readHTMLTable() %>%
dplyr::tibble() %>%
janitor::clean_names() %>%
tidyr::separate(date, c("mes", "year")) %>%
dplyr::transmute(fecha = paste0(mes, "/", year),
mes = as.numeric(mes),
year = as.numeric(year),
inpc = as.numeric(sp1)),
envir = as.environment("package:presupuestoR"))
env_binding_unlock(as.environment("package:presupuestoR"))
assign("inpc_bd",
XML::htmlParse(temp) %>%
XML::getNodeSet('//table') %>%
.[[6]] %>%
XML::readHTMLTable() %>%
dplyr::tibble() %>%
janitor::clean_names() %>%
tidyr::separate(date, c("mes", "year")) %>%
dplyr::transmute(fecha = paste0(mes, "/", year),
mes = as.numeric(mes),
year = as.numeric(year),
inpc = as.numeric(sp1)),
envir = as.environment("package:presupuestoR"))
assign("inpc_bd",
XML::htmlParse(temp) %>%
XML::getNodeSet('//table') %>%
.[[6]] %>%
XML::readHTMLTable() %>%
dplyr::tibble() %>%
janitor::clean_names() %>%
tidyr::separate(date, c("mes", "year")) %>%
dplyr::transmute(fecha = paste0(mes, "/", year),
mes = as.numeric(mes),
year = as.numeric(year),
inpc = as.numeric(sp1)),
envir = env_binding_unlock(as.environment("package:presupuestoR")))
as.environment("package:presupuestoR")
env_binding_unlock(as.environment("package:presupuestoR"))
hjg
assign("inpc_bd",
XML::htmlParse(temp) %>%
XML::getNodeSet('//table') %>%
.[[6]] %>%
XML::readHTMLTable() %>%
dplyr::tibble() %>%
janitor::clean_names() %>%
tidyr::separate(date, c("mes", "year")) %>%
dplyr::transmute(fecha = paste0(mes, "/", year),
mes = as.numeric(mes),
year = as.numeric(year),
inpc = as.numeric(sp1)),
envir = env_binding_unlock(as.environment("package:presupuestoR")))
env_binding_unlock(as.environment("package:presupuestoR"))
assign("inpc_bd",
XML::htmlParse(temp) %>%
XML::getNodeSet('//table') %>%
.[[6]] %>%
XML::readHTMLTable() %>%
dplyr::tibble() %>%
janitor::clean_names() %>%
tidyr::separate(date, c("mes", "year")) %>%
dplyr::transmute(fecha = paste0(mes, "/", year),
mes = as.numeric(mes),
year = as.numeric(year),
inpc = as.numeric(sp1)),
envir = as.environment("package:presupuestoR"))
env_unlock(as.environment("package:presupuestoR"))
assign("inpc_bd",
XML::htmlParse(temp) %>%
XML::getNodeSet('//table') %>%
.[[6]] %>%
XML::readHTMLTable() %>%
dplyr::tibble() %>%
janitor::clean_names() %>%
tidyr::separate(date, c("mes", "year")) %>%
dplyr::transmute(fecha = paste0(mes, "/", year),
mes = as.numeric(mes),
year = as.numeric(year),
inpc = as.numeric(sp1)),
envir = as.environment("package:presupuestoR"))
pacman::p_load(devtools)
document()
load_all()
install()
pacman::p_load(devtools)
load_all()
install()
pacman::p_load(devtools)
document()
load_all()
install()
load("data/deflactor_local.rda")
View(deflactor_local)
load()
pacman::p_load(devtools)
load_all()
install()
deflactor_local
pacman::p_load(devtools)
load_all()
install()
pacman::p_load(devtools)
)
pacman::p_load(devtools)
install()
